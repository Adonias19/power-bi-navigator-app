
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zxgsdqblwshpktuurmgu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp4Z3NkcWJsd3NocGt0dXVybWd1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ0MzgyMjYsImV4cCI6MjA2MDAxNDIyNn0.8ibP9MRTAk9kztHll7SueFRcJPDi6jq0b4Oo0liSF9o";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    storage: localStorage,
    autoRefreshToken: true,
    debug: true,
    flowType: 'implicit' // Disable email confirmation by setting implicit flow
  }
});

// Create a test user (only in development)
if (import.meta.env.DEV) {
  // Check if the user already exists
  const checkUser = async () => {
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email: 'adonikelias@gmail.com',
        password: 'Adonik123',
      });
      
      if (error && error.message.includes('Invalid login credentials')) {
        // If the user doesn't exist, create it
        const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
          email: 'adonikelias@gmail.com',
          password: 'Adonik123',
          options: {
            data: {
              name: 'Adonik Elias',
            }
          }
        });
        
        if (signUpError) {
          console.error('Error creating test user:', signUpError);
        } else {
          console.log('Test user created successfully');
        }
      } else if (!error) {
        // Sign out after checking
        await supabase.auth.signOut();
      }
    } catch (err) {
      console.error('Error checking test user:', err);
    }
  };
  
  // Run the check but don't block the app initialization
  checkUser();
}
